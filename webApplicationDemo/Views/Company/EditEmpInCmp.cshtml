@model EmployeeModel
@{
    ViewData["Title"] = "Edit Employee";
    int companyId = Model.CompanyID;
    string companyName = ViewBag.CompanyName ?? "Unknown Company";
}

<script type="text/javascript" src="https://unpkg.com/webcam-easy/dist/webcam-easy.min.js"></script>
<style>
    .loading-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(255, 255, 255, 0.7);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .disabled-form {
        pointer-events: none;
        opacity: 0.5;
    }
</style>

<div id="loading-overlay" class="loading-overlay" hidden>
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
</div>

<div class="container mt-4">
    <h2 class="text-center mb-4">Edit Employee in <span class="text-primary">@companyName</span></h2>

    <form asp-action="UpdateEmployee" asp-controller="Employee" method="post" enctype="multipart/form-data">
        <input type="hidden" name="EmployeeID" value="@Model.EmployeeID" />
        <input type="hidden" name="CompanyID" value="@companyId" />
        <input type="hidden" id="EmployeePhoto" name="EmployeePhoto" value="@Convert.ToBase64String(Model.EmployeeImage ?? new byte[0])" />

        <div class="mb-3">
            <label for="FullName" class="form-label">Full Name</label>
            <input type="text" class="form-control" id="FullName" name="FullName" value="@Model.FullName" required>
        </div>

        <div class="mb-3">
            <label for="Email" class="form-label">Email</label>
            <input type="email" class="form-control" id="Email" name="Email" value="@Model.Email" required>
        </div>

        <div class="mb-3">
            <label for="Phone" class="form-label">Phone</label>
            <input type="text" class="form-control" id="Phone" name="Phone" value="@Model.Phone" required>
        </div>

        <div class="mb-3">
            <label for="HireDate" class="form-label">Hire Date</label>
            <input type="date" class="form-control" id="HireDate" name="HireDate" value="@Model.HireDate.ToString("yyyy-MM-dd")" required>
        </div>

        <div class="mb-3">
            <label class="form-label">Profile Photo</label>
            <div>
                <button type="button" class="btn btn-secondary" onclick="startWebcam()">Use Webcam</button>
                <input type="file" id="uploadPhoto" class="form-control mt-2" accept="image/*">
            </div>
            <video id="webcam" autoplay playsinline width="320" height="240" class="d-none"></video>
            <canvas id="canvas" class="d-none"></canvas>
            <button type="button" class="btn btn-primary mt-2 d-none" id="captureButton">Capture Photo</button>
            <img id="photoPreview" class="mt-2" width="150" src="@(Model.EmployeeImage != null ? $"data:image/jpeg;base64,{Convert.ToBase64String(Model.EmployeeImage)}" : "/images/default-avatar.png")" />
        </div>

        <button type="submit" class="btn btn-success">Update Employee</button>
    </form>
</div>

<script>
    const webcamElement = document.getElementById('webcam');
    const canvasElement = document.getElementById('canvas');
    const photoPreview = document.getElementById('photoPreview');
    const employeePhotoInput = document.getElementById('EmployeePhoto');
    const captureButton = document.getElementById('captureButton');
    const uploadPhotoInput = document.getElementById('uploadPhoto');
    const webcam = new Webcam(webcamElement, 'user', canvasElement);

    function startWebcam() {
        webcamElement.classList.remove('d-none');
        captureButton.classList.remove('d-none');
        webcam.start();
    }

    captureButton.addEventListener('click', function () {
        let picture = webcam.snap();
        photoPreview.src = picture;
        photoPreview.classList.remove('d-none');
        employeePhotoInput.value = picture;
        webcam.stop();
        webcamElement.classList.add('d-none');
        captureButton.classList.add('d-none');
    });

    uploadPhotoInput.addEventListener('change', function (event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function (e) {
                photoPreview.src = e.target.result;
                photoPreview.classList.remove('d-none');
                employeePhotoInput.value = e.target.result;
            };
            reader.readAsDataURL(file);
        }
    });

    document.querySelector("form").addEventListener("submit", function (event) {
        event.preventDefault();

        const form = this;
        const overlay = document.getElementById("loading-overlay");

        form.classList.add("disabled-form");
        overlay.removeAttribute("hidden");

        const formData = new FormData(form);

        fetch(form.action, {
            method: "POST",
            body: formData
        })
            .then(response => response.json())
            .then(data => {
                form.classList.remove("disabled-form");
                overlay.setAttribute("hidden", true);

                if (data.success) {
                    alert("Employee updated successfully!");
                    window.location.href = data.redirectUrl;
                } else {
                    alert(data.message || "An error occurred. Please try again.");
                }
            })
            .catch(error => {
                form.classList.remove("disabled-form");
                overlay.setAttribute("hidden", true);
                alert("An unexpected error occurred.");
            });
    });
</script>
